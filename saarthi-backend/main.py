from fastapi import FastAPI, HTTPException, UploadFile, File
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import FileResponse
from pydantic import BaseModel
import os
import uuid
import json
from typing import Dict, Any

app = FastAPI(title="Saarthi Health Education API", version="1.0.0")

# Enable CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["http://localhost:3000", "http://127.0.0.1:3000"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Language content for all 5 supported languages
LANGUAGE_CONTENT = {
    "hi-IN": {
        "welcome": "рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдореИрдВ рдЖрдкрдХреА рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╢рд┐рдХреНрд╖рд╛ рдореЗрдВ рдорджрдж рдХрд░реВрдВрдЧрд╛ред",
        "excellent": "рдмрд╣реБрдд рдмрдврд╝рд┐рдпрд╛! рдЖрдкрдиреЗ рд╕рд╣реА рдЬрд╡рд╛рдм рджрд┐рдпрд╛! рдЖрдкрдХреЛ 50 рдЕрдВрдХ рдорд┐рд▓реЗ!",
        "wrong_answer": "рдпрд╣ рдмрд┐рд▓реНрдХреБрд▓ рд╕рд╣реА рдирд╣реАрдВ рд╣реИред рд╕рд╣реА рдЬрд╡рд╛рдм рд╣реИ: ",
        "not_understood": "рдорд╛рдлрд╝ рдХрд░реЗрдВ, рдореИрдВ рд╕рдордЭ рдирд╣реАрдВ рдкрд╛рдпрд╛ред рдХреГрдкрдпрд╛ рдлрд┐рд░ рд╕реЗ рдХреЛрд╢рд┐рд╢ рдХрд░реЗрдВред",
        "listening": "ЁЯОд рд╕реБрди рд░рд╣рд╛ рд╣реВрдВ...",
        "speaking": "ЁЯФК рдмреЛрд▓ рд░рд╣рд╛ рд╣реВрдВ...",
        "quiz_master": "рдХреНрд╡рд┐рдЬ рдорд╛рд╕реНрдЯрд░",
        "health_warrior": "рд╕реНрд╡рд╛рд╕реНрдереНрдп рдпреЛрджреНрдзрд╛",
        "first_lesson": "рдкрд╣рд▓рд╛ рдкрд╛рда"
    },
    "bn-IN": {
        "welcome": "рж╕рзНржмрж╛ржЧрждржо! ржЖржорж┐ ржЖржкржирж╛рж░ рж╕рзНржмрж╛рж╕рзНржерзНржп рж╢рж┐ржХрзНрж╖рж╛ржпрж╝ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░ржмред",
        "excellent": "ржЪржорзОржХрж╛рж░! ржЖржкржирж┐ рж╕ржарж┐ржХ ржЙрждрзНрждрж░ ржжрж┐ржпрж╝рзЗржЫрзЗржи! ржЖржкржирж┐ 50 ржкржпрж╝рзЗржирзНржЯ ржкрзЗржпрж╝рзЗржЫрзЗржи!",
        "wrong_answer": "ржПржЯрж╛ ржарж┐ржХ рж╕ржарж┐ржХ ржиржпрж╝ред рж╕ржарж┐ржХ ржЙрждрзНрждрж░ рж╣рж▓: ",
        "not_understood": "ржжрзБржГржЦрж┐ржд, ржЖржорж┐ ржмрзБржЭрждрзЗ ржкрж╛рж░рж┐ржирж┐ред ржЕржирзБржЧрзНрж░рж╣ ржХрж░рзЗ ржЖржмрж╛рж░ ржЪрзЗрж╖рзНржЯрж╛ ржХрж░рзБржиред",
        "listening": "ЁЯОд рж╢рзБржиржЫрж┐...",
        "speaking": "ЁЯФК ржмрж▓ржЫрж┐...",
        "quiz_master": "ржХрзБржЗржЬ ржорж╛рж╕рзНржЯрж╛рж░",
        "health_warrior": "рж╕рзНржмрж╛рж╕рзНржерзНржп ржпрзЛржжрзНржзрж╛",
        "first_lesson": "ржкрзНрж░ржержо ржкрж╛ржа"
    },
    "mr-IN": {
        "welcome": "рд╕реНрд╡рд╛рдЧрдд рдЖрд╣реЗ! рдореА рддреБрдордЪреНрдпрд╛ рдЖрд░реЛрдЧреНрдп рд╢рд┐рдХреНрд╖рдгрд╛рдд рдорджрдд рдХрд░реЗрди.",
        "excellent": "рдЙрддреНрдХреГрд╖реНрдЯ! рддреБрдореНрд╣реА рдмрд░реЛрдмрд░ рдЙрддреНрддрд░ рджрд┐рд▓реЗ! рддреБрдореНрд╣рд╛рд▓рд╛ 50 рдЧреБрдг рдорд┐рд│рд╛рд▓реЗ!",
        "wrong_answer": "рддреЗ рдЕрдЧрджреА рдмрд░реЛрдмрд░ рдирд╛рд╣реА. рдмрд░реЛрдмрд░ рдЙрддреНрддрд░ рдЖрд╣реЗ: ",
        "not_understood": "рдорд╛рдл рдХрд░рд╛, рдореА рд╕рдордЬреВ рд╢рдХрд▓реЛ рдирд╛рд╣реА. рдХреГрдкрдпрд╛ рдкреБрдиреНрд╣рд╛ рдкреНрд░рдпрддреНрди рдХрд░рд╛.",
        "listening": "ЁЯОд рдРрдХрдд рдЖрд╣реЗ...",
        "speaking": "ЁЯФК рдмреЛрд▓рдд рдЖрд╣реЗ...",
        "quiz_master": "рдХреНрд╡рд┐рдЭ рдорд╛рд╕реНрдЯрд░",
        "health_warrior": "рдЖрд░реЛрдЧреНрдп рдпреЛрджреНрдзрд╛",
        "first_lesson": "рдкрд╣рд┐рд▓рд╛ рдзрдбрд╛"
    },
    "ta-IN": {
        "welcome": "ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЗройрпН! роиро╛ройрпН роЙроЩрпНроХро│рпН роЪрпБроХро╛родро╛ро░ роХро▓рпНро╡ро┐ропро┐ро▓рпН роЙродро╡рпБро╡рпЗройрпН.",
        "excellent": "роЪро┐ро▒роирпНродродрпБ! роирпАроЩрпНроХро│рпН роЪро░ро┐ропро╛рой рокродро┐ро▓рпН роХрпКроЯрпБродрпНродрпАро░рпНроХро│рпН! роирпАроЩрпНроХро│рпН 50 рокрпБро│рпНро│ро┐роХро│рпН рокрпЖро▒рпНро▒рпАро░рпНроХро│рпН!",
        "wrong_answer": "роЕродрпБ роорпБро▒рпНро▒ро┐ро▓рпБроорпН роЪро░ро┐ропро╛роХ роЗро▓рпНро▓рпИ. роЪро░ро┐ропро╛рой рокродро┐ро▓рпН: ",
        "not_understood": "рооройрпНройро┐роХрпНроХро╡рпБроорпН, роиро╛ройрпН рокрпБро░ро┐роирпНродрпБроХрпКро│рпН роорпБроЯро┐ропро╡ро┐ро▓рпНро▓рпИ. родропро╡рпБроЪрпЖропрпНродрпБ роорпАрогрпНроЯрпБроорпН роорпБропро▒рпНроЪро┐роХрпНроХро╡рпБроорпН.",
        "listening": "ЁЯОд роХрпЗроЯрпНроХро┐ро▒рпЗройрпН...",
        "speaking": "ЁЯФК рокрпЗроЪрпБроХро┐ро▒рпЗройрпН...",
        "quiz_master": "ро╡ро┐ройро╛роЯро┐ ро╡ро┐ройро╛ рооро╛ро╕рпНроЯро░рпН",
        "health_warrior": "роЪрпБроХро╛родро╛ро░ ро╡рпАро░ро░рпН",
        "first_lesson": "роорпБродро▓рпН рокро╛роЯроорпН"
    },
    "en-IN": {
        "welcome": "Welcome! I will help you with health education.",
        "excellent": "Excellent! You got it right! You earned 50 points!",
        "wrong_answer": "That's not quite right. The correct answer is: ",
        "not_understood": "Sorry, I could not understand. Please try again.",
        "listening": "ЁЯОд Listening...",
        "speaking": "ЁЯФК Speaking...",
        "quiz_master": "Quiz Master",
        "health_warrior": "Health Warrior",
        "first_lesson": "First Lesson"
    }
}

# Voice mappings for different languages
VOICE_MAPPINGS = {
    "hi-IN": "hi-IN-Deepika",
    "bn-IN": "bn-IN-Tanishaa", 
    "mr-IN": "mr-IN-Aarohi",
    "ta-IN": "ta-IN-Pallavi",
    "en-IN": "en-IN-Neerja"
}

class TTSRequest(BaseModel):
    text: str
    language: str = "hi-IN"

class STTRequest(BaseModel):
    audio_data: str
    language: str = "hi-IN"

@app.get("/")
async def root():
    return {"message": "Saarthi Health Education API", "status": "running"}

@app.get("/health")
async def health_check():
    return {"status": "healthy", "service": "Saarthi API"}

@app.get("/language-content/{language_code}")
async def get_language_content(language_code: str):
    """Get language-specific content for the frontend"""
    if language_code not in LANGUAGE_CONTENT:
        raise HTTPException(status_code=400, detail="Unsupported language")
    
    return LANGUAGE_CONTENT[language_code]

@app.get("/health-content/")
async def get_health_content():
    """Get health education content in multiple languages"""
    return {
        "topics": [
            {
                "id": "pregnancy",
                "title": {
                    "hi-IN": "рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛ рдкреЛрд╖рдг",
                    "bn-IN": "ржЧрж░рзНржнрж╛ржмрж╕рзНржерж╛рж░ ржкрзБрж╖рзНржЯрж┐", 
                    "mr-IN": "рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛ рдкреЛрд╖рдг",
                    "ta-IN": "роХро░рпНрокрпНрок роХро╛ро▓ роКроЯрпНроЯроЪрпНроЪродрпНродрпБ",
                    "en-IN": "Pregnancy Nutrition"
                },
                "content": {
                    "hi-IN": "рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛ рдХреЗ рджреМрд░рд╛рди, рдмрд╣реБрдд рд╕рд╛рд░реЗ рдлрд▓, рд╕рдмреНрдЬрд┐рдпрд╛рдВ рдФрд░ рдкреНрд░реЛрдЯреАрди рдЦрд╛рдПрдВред рдХрдЪреНрдЪреА рдордЫрд▓реА рдФрд░ рдмрд┐рдирд╛ рдкрд╛рд╢реНрдЪрд░рд╛рдЗрдЬреНрдб рджреВрдз рд╕реЗ рдмрдЪреЗрдВред рджреИрдирд┐рдХ рдкреНрд░рд╕рд╡рдкреВрд░реНрд╡ рд╡рд┐рдЯрд╛рдорд┐рди рд▓реЗрдВред",
                    "bn-IN": "ржЧрж░рзНржнрж╛ржмрж╕рзНржерж╛ржпрж╝ ржкрзНрж░ржЪрзБрж░ ржлрж▓, рж╕ржмржЬрж┐ ржПржмржВ ржкрзНрж░рзЛржЯрж┐ржи ржЦрж╛ржиред ржХрж╛ржБржЪрж╛ ржорж╛ржЫ ржПржмржВ ржЕржкрж░рж┐рж╢рзЛржзрж┐ржд ржжрзБржз ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржиред ржкрзНрж░рждрж┐ржжрж┐ржи ржкрзНрж░рж╕ржмржкрзВрж░рзНржм ржнрж┐ржЯрж╛ржорж┐ржи ржирж┐ржиред",
                    "mr-IN": "рдЧрд░реНрднрд╛рд╡рд╕реНрдереЗрджрд░рдореНрдпрд╛рди, рднрд░рдкреВрд░ рдлрд│реЗ, рднрд╛рдЬреНрдпрд╛ рдЖрдгрд┐ рдкреНрд░рдерд┐рдиреЗ рдЦрд╛. рдХрдЪреНрдЪрд╛ рдорд╛рд╕рд╛ рдЖрдгрд┐ рдЕрдкрд╛рд╢реНрдЪрд░рд╛рдЗрдЬреНрдб рджреВрдз рдЯрд╛рд│рд╛. рджреИрдирд┐рдХ рдкреНрд░рд╕рд╡рдкреВрд░реНрд╡ рдЬреАрд╡рдирд╕рддреНрддреНрд╡реЗ рдШреНрдпрд╛.",
                    "ta-IN": "роХро░рпНрокрпНрок роХро╛ро▓родрпНродро┐ро▓рпН, роиро┐ро▒рпИроп рокро┤роЩрпНроХро│рпН, роХро╛ропрпНроХро▒ро┐роХро│рпН рооро▒рпНро▒рпБроорпН рокрпБро░родроЩрпНроХро│рпИ роЙрогрпНрогрпБроЩрпНроХро│рпН. роХроЪрпНроЪро╛ роорпАройрпН рооро▒рпНро▒рпБроорпН рокро╛ро╕рпНроЪро░рпИро╕рпН роЪрпЖропрпНропрокрпНрокроЯро╛род рокро╛ро▓рпИродрпН родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН. родро┐ройроЪро░ро┐ роХро░рпНрокрпНрок роорпБройрпН ро╡рпИроЯрпНроЯрооро┐ройрпНроХро│рпИ роОроЯрпБродрпНродрпБроХрпНроХрпКро│рпНро│рпБроЩрпНроХро│рпН.",
                    "en-IN": "During pregnancy, eat plenty of fruits, vegetables, and protein. Avoid raw fish and unpasteurized milk. Take your prenatal vitamins daily."
                }
            },
            {
                "id": "dengue",
                "title": {
                    "hi-IN": "рдбреЗрдВрдЧреВ рд░реЛрдХрдерд╛рдо",
                    "bn-IN": "ржбрзЗржЩрзНржЧрзБ ржкрзНрж░рждрж┐рж░рзЛржз",
                    "mr-IN": "рдбреЗрдВрдЧреВ рдкреНрд░рддрд┐рдмрдВрдз", 
                    "ta-IN": "роЯрпЖроЩрпНроХрпБ родроЯрпБрокрпНрокрпБ",
                    "en-IN": "Dengue Prevention"
                },
                "content": {
                    "hi-IN": "рдбреЗрдВрдЧреВ рдордЪреНрдЫрд░реЛрдВ рд╕реЗ рдлреИрд▓рддрд╛ рд╣реИред рдЕрдкрдиреЗ рдЖрд╕рдкрд╛рд╕ рдХреЛ рд╕рд╛рдл рд░рдЦреЗрдВ, рдЦрдбрд╝реЗ рдкрд╛рдиреА рдХреЛ рд╣рдЯрд╛рдПрдВ, рдордЪреНрдЫрд░рджрд╛рдиреА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рдФрд░ рд▓рдВрдмреА рдЖрд╕реНрддреАрди рдкрд╣рдиреЗрдВред",
                    "bn-IN": "ржбрзЗржЩрзНржЧрзБ ржорж╢рж╛рж░ ржорж╛ржзрзНржпржорзЗ ржЫржбрж╝рж╛ржпрж╝ред ржЖрж╢ржкрж╛рж╢ ржкрж░рж┐рж╖рзНржХрж╛рж░ рж░рж╛ржЦрзБржи, ржЬржорзЗ ржерж╛ржХрж╛ ржЬрж▓ рж╕рж░рж╛ржи, ржорж╢рж╛рж░рж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ржПржмржВ рж▓ржорзНржмрж╛ рж╣рж╛рждрж╛ ржкрж░рзБржиред",
                    "mr-IN": "рдбреЗрдВрдЧреВ рдбрд╛рд╕рд╛рдВрджреНрд╡рд╛рд░реЗ рдкрд╕рд░рддреЛ. рдЖрдкрд▓реНрдпрд╛ рд╕рднреЛрд╡рддрд╛рд▓реА рд╕реНрд╡рдЪреНрдЫ рдареЗрд╡рд╛, рд╕реНрдерд┐рд░ рдкрд╛рдгреА рдХрд╛рдвреВрди рдЯрд╛рдХрд╛, рдбрд╛рд╕рдкрд▓реНрд▓рд╛ рд╡рд╛рдкрд░рд╛ рдЖрдгрд┐ рд▓рд╛рдВрдм рдмрд╛рд╣реА рдШрд╛рд▓рд╛.",
                    "ta-IN": "роЯрпЖроЩрпНроХрпБ роХрпКроЪрпБроХрпНроХро│ро╛ро▓рпН рокро░ро╡рпБроХро┐ро▒родрпБ. роЙроЩрпНроХро│рпН роЪрпБро▒рпНро▒рпБрокрпНрокрпБро▒роЩрпНроХро│рпИ роЪрпБродрпНродрооро╛роХ ро╡рпИродрпНродро┐ро░рпБроЩрпНроХро│рпН, роиро┐ро▒рпНроХрпБроорпН родрогрпНрогрпАро░рпИ роЕроХро▒рпНро▒рпБроЩрпНроХро│рпН, роХрпКроЪрпБ ро╡ро▓рпИроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродрпБроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН роирпАрогрпНроЯ роЪроЯрпНроЯрпИроХро│рпИ роЕрогро┐ропрпБроЩрпНроХро│рпН.",
                    "en-IN": "Dengue is spread by mosquitoes. Keep your surroundings clean, remove standing water, use mosquito nets, and wear long sleeves."
                }
            },
            {
                "id": "hygiene",
                "title": {
                    "hi-IN": "рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕реНрд╡рдЪреНрдЫрддрд╛",
                    "bn-IN": "ржмрзНржпржХрзНрждрж┐ржЧржд рж╕рзНржмрж╛рж╕рзНржерзНржпржмрж┐ржзрж┐",
                    "mr-IN": "рд╡реИрдпрдХреНрддрд┐рдХ рд╕реНрд╡рдЪреНрдЫрддрд╛",
                    "ta-IN": "родройро┐рокрпНрокроЯрпНроЯ роЪрпБроХро╛родро╛ро░роорпН", 
                    "en-IN": "Personal Hygiene"
                },
                "content": {
                    "hi-IN": "рдЦрд╛рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдФрд░ рд╢реМрдЪрд╛рд▓рдп рдХреЗ рдмрд╛рдж рд╕рд╛рдмреБрди рд╕реЗ рд╣рд╛рде рдзреЛрдПрдВред рдирд╛рдЦреВрди рдЫреЛрдЯреЗ рдФрд░ рд╕рд╛рдл рд░рдЦреЗрдВред рд╕рд╛рдл рдкрд╛рдиреА рд╕реЗ рд░реЛрдЬ рдирд╣рд╛рдПрдВред",
                    "bn-IN": "ржЦрж╛ржУржпрж╝рж╛рж░ ржЖржЧрзЗ ржПржмржВ ржЯржпрж╝рж▓рзЗржЯрзЗрж░ ржкрж░ рж╕рж╛ржмрж╛ржи ржжрж┐ржпрж╝рзЗ рж╣рж╛ржд ржзрзБржпрж╝рзЗ ржирж┐ржиред ржиржЦ ржЫрзЛржЯ ржПржмржВ ржкрж░рж┐рж╖рзНржХрж╛рж░ рж░рж╛ржЦрзБржиред ржкрж░рж┐рж╖рзНржХрж╛рж░ ржЬрж▓ ржжрж┐ржпрж╝рзЗ ржкрзНрж░рждрж┐ржжрж┐ржи рж╕рзНржирж╛ржи ржХрж░рзБржиред",
                    "mr-IN": "рдЦрд╛рдгреНрдпрд╛рдкреВрд░реНрд╡реА рдЖрдгрд┐ рд╢реМрдЪрд╛рд▓рдпрд╛рдирдВрддрд░ рд╕рд╛рдмрдгрд╛рдиреЗ рд╣рд╛рдд рдзреБрд╡рд╛. рдирдЦреЗ рд▓рд╣рд╛рди рдЖрдгрд┐ рд╕реНрд╡рдЪреНрдЫ рдареЗрд╡рд╛. рд╕реНрд╡рдЪреНрдЫ рдкрд╛рдгреНрдпрд╛рдиреЗ рджрд░рд░реЛрдЬ рд╕реНрдирд╛рди рдХрд░рд╛.",
                    "ta-IN": "роЪро╛рокрпНрокро┐роЯрпБро╡родро▒рпНроХрпБ роорпБройрпН рооро▒рпНро▒рпБроорпН роХро┤ро┐рокрпНрокро▒рпИроХрпНроХрпБрокрпН рокро┐ро▒роХрпБ роЪрпЛрокрпНрокрпБроЯройрпН роХрпИроХро│рпИ роХро┤рпБро╡рпБроЩрпНроХро│рпН. роироХроЩрпНроХро│рпИ роХрпБроЯрпНроЯрпИропро╛роХро╡рпБроорпН роЪрпБродрпНродрооро╛роХро╡рпБроорпН ро╡рпИродрпНродро┐ро░рпБроЩрпНроХро│рпН. роЪрпБродрпНродрооро╛рой родрогрпНрогрпАро░ро┐ро▓рпН родро┐ройроЪро░ро┐ роХрпБро│ро┐ропрпБроЩрпНроХро│рпН.",
                    "en-IN": "Wash your hands with soap before eating and after using the toilet. Keep your nails short and clean. Bathe daily with clean water."
                }
            }
        ]
    }

@app.post("/tts/")
async def text_to_speech(request: TTSRequest):
    """
    Text-to-Speech endpoint that returns instructions for client-side Web Speech API
    """
    try:
        # Get the appropriate voice for the language
        voice_id = VOICE_MAPPINGS.get(request.language, "en-IN-Neerja")
        
        # Return instructions for client-side TTS
        return {
            "success": True,
            "message": "Use Web Speech API for TTS",
            "instructions": {
                "method": "speechSynthesis.speak()",
                "language": request.language,
                "voice_id": voice_id,
                "text": request.text
            },
            "fallback": "If Web Speech API fails, use browser's built-in TTS capabilities"
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "message": "TTS failed. Please use browser's Web Speech API."
        }

@app.post("/stt/")
async def speech_to_text(request: STTRequest):
    """
    Speech-to-Text endpoint that returns instructions for client-side Web Speech API
    """
    try:
        # Return instructions for client-side STT
        return {
            "success": True,
            "message": "Use Web Speech API for STT",
            "instructions": {
                "method": "SpeechRecognition",
                "language": request.language,
                "continuous": False,
                "interimResults": False
            },
            "fallback": "If Web Speech API fails, use browser's built-in speech recognition"
        }
        
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "message": "STT failed. Please use browser's Web Speech API."
        }

@app.post("/pdf-to-audio/")
async def pdf_to_audio(file: UploadFile = File(...)):
    """
    PDF to Audio conversion endpoint
    """
    try:
        # For now, return a simple response indicating PDF processing
        return {
            "success": True,
            "message": "PDF processing initiated",
            "filename": file.filename,
            "instructions": "Use Web Speech API to read PDF content aloud"
        }
    except Exception as e:
        return {
            "success": False,
            "error": str(e),
            "message": "PDF processing failed"
        }

@app.get("/supported-languages/")
async def get_supported_languages():
    """Get list of supported languages"""
    return {
        "languages": [
            {"code": "hi-IN", "name": "рд╣рд┐рдВрджреА", "voice": "hi-IN-Deepika"},
            {"code": "bn-IN", "name": "ржмрж╛ржВрж▓рж╛", "voice": "bn-IN-Tanishaa"},
            {"code": "mr-IN", "name": "рдорд░рд╛рдареА", "voice": "mr-IN-Aarohi"},
            {"code": "ta-IN", "name": "родрооро┐ро┤рпН", "voice": "ta-IN-Pallavi"},
            {"code": "en-IN", "name": "English", "voice": "en-IN-Neerja"}
        ]
    }

@app.get("/user-progress/{user_id}")
async def get_user_progress(user_id: str):
    """Get user progress and achievements"""
    # Mock user progress data
    return {
        "user_id": user_id,
        "points": 150,
        "badges": ["First Lesson", "Health Warrior", "Quiz Master"],
        "lessons_completed": 3,
        "quizzes_taken": 5,
        "correct_answers": 4
    }

if __name__ == "__main__":
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000) 