import React, { useState, useEffect } from 'react';
import './App.css';

function App() {
  // User state
  const [userLanguage, setUserLanguage] = useState('hi-IN'); // Hindi by default
  const [userName, setUserName] = useState('Sita');
  const [userPoints, setUserPoints] = useState(150);
  const [userBadges, setUserBadges] = useState(['First Lesson', 'Health Warrior']);
  
  // App state
  const [currentSection, setCurrentSection] = useState('home');
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const [isPaused, setIsPaused] = useState(false);
  const [liveAlerts, setLiveAlerts] = useState([]);
  const [quizQuestion, setQuizQuestion] = useState(null);
  const [quizAnswer, setQuizAnswer] = useState('');
  const [quizResult, setQuizResult] = useState('');
  const [languageContent, setLanguageContent] = useState({});
  
  // Speech synthesis and recognition
  const [speechSynthesis, setSpeechSynthesis] = useState(null);
  const [speechRecognition, setSpeechRecognition] = useState(null);
  const [currentUtterance, setCurrentUtterance] = useState(null);
  const [currentAudio, setCurrentAudio] = useState(null);
  
  // Initialize speech APIs
  useEffect(() => {
    // Initialize speech synthesis
    if ('speechSynthesis' in window) {
      setSpeechSynthesis(window.speechSynthesis);
    }
    
    // Initialize speech recognition
    if ('webkitSpeechRecognition' in window || 'SpeechRecognition' in window) {
      const SpeechRecognition = window.SpeechRecognition || window.webkitSpeechRecognition;
      const recognition = new SpeechRecognition();
      recognition.continuous = false;
      recognition.interimResults = false;
      
      // Set language based on userLanguage
      const languageMap = {
        'hi-IN': 'hi-IN',
        'bn-IN': 'bn-IN', 
        'mr-IN': 'mr-IN',
        'ta-IN': 'ta-IN',
        'en-IN': 'en-US'
      };
      
      recognition.lang = languageMap[userLanguage] || 'hi-IN';
      
      recognition.onresult = (event) => {
        const transcript = event.results[0][0].transcript;
        setQuizAnswer(transcript);
        checkQuizAnswer(transcript);
        setIsListening(false);
      };
      
      recognition.onerror = (event) => {
        console.error('Speech recognition error:', event.error);
        setQuizAnswer(languageContent.not_understood || 'Sorry, I could not understand. Please try again.');
        setIsListening(false);
      };
      
      recognition.onend = () => {
        setIsListening(false);
      };
      
      setSpeechRecognition(recognition);
    }
  }, [userLanguage, languageContent.not_understood]);

  // Health content sections with language support
  const healthSections = [
    {
      id: 'pregnancy',
      title: {
        'hi-IN': 'рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛ рдкреЛрд╖рдг',
        'bn-IN': 'ржЧрж░рзНржнрж╛ржмрж╕рзНржерж╛рж░ ржкрзБрж╖рзНржЯрж┐',
        'mr-IN': 'рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛ рдкреЛрд╖рдг',
        'ta-IN': 'роХро░рпНрокрпНрок роХро╛ро▓ роКроЯрпНроЯроЪрпНроЪродрпНродрпБ',
        'en-IN': 'Pregnancy Nutrition'
      },
      icon: 'ЁЯд▒',
      content: {
        'hi-IN': 'рдЧрд░реНрднрд╛рд╡рд╕реНрдерд╛ рдХреЗ рджреМрд░рд╛рди, рдмрд╣реБрдд рд╕рд╛рд░реЗ рдлрд▓, рд╕рдмреНрдЬрд┐рдпрд╛рдВ рдФрд░ рдкреНрд░реЛрдЯреАрди рдЦрд╛рдПрдВред рдХрдЪреНрдЪреА рдордЫрд▓реА рдФрд░ рдмрд┐рдирд╛ рдкрд╛рд╢реНрдЪрд░рд╛рдЗрдЬреНрдб рджреВрдз рд╕реЗ рдмрдЪреЗрдВред рджреИрдирд┐рдХ рдкреНрд░рд╕рд╡рдкреВрд░реНрд╡ рд╡рд┐рдЯрд╛рдорд┐рди рд▓реЗрдВред',
        'bn-IN': 'ржЧрж░рзНржнрж╛ржмрж╕рзНржерж╛ржпрж╝ ржкрзНрж░ржЪрзБрж░ ржлрж▓, рж╕ржмржЬрж┐ ржПржмржВ ржкрзНрж░рзЛржЯрж┐ржи ржЦрж╛ржиред ржХрж╛ржБржЪрж╛ ржорж╛ржЫ ржПржмржВ ржЕржкрж░рж┐рж╢рзЛржзрж┐ржд ржжрзБржз ржПржбрж╝рж┐ржпрж╝рзЗ ржЪрж▓рзБржиред ржкрзНрж░рждрж┐ржжрж┐ржи ржкрзНрж░рж╕ржмржкрзВрж░рзНржм ржнрж┐ржЯрж╛ржорж┐ржи ржирж┐ржиред',
        'mr-IN': 'рдЧрд░реНрднрд╛рд╡рд╕реНрдереЗрджрд░рдореНрдпрд╛рди, рднрд░рдкреВрд░ рдлрд│реЗ, рднрд╛рдЬреНрдпрд╛ рдЖрдгрд┐ рдкреНрд░рдерд┐рдиреЗ рдЦрд╛. рдХрдЪреНрдЪрд╛ рдорд╛рд╕рд╛ рдЖрдгрд┐ рдЕрдкрд╛рд╢реНрдЪрд░рд╛рдЗрдЬреНрдб рджреВрдз рдЯрд╛рд│рд╛. рджреИрдирд┐рдХ рдкреНрд░рд╕рд╡рдкреВрд░реНрд╡ рдЬреАрд╡рдирд╕рддреНрддреНрд╡реЗ рдШреНрдпрд╛.',
        'ta-IN': 'роХро░рпНрокрпНрок роХро╛ро▓родрпНродро┐ро▓рпН, роиро┐ро▒рпИроп рокро┤роЩрпНроХро│рпН, роХро╛ропрпНроХро▒ро┐роХро│рпН рооро▒рпНро▒рпБроорпН рокрпБро░родроЩрпНроХро│рпИ роЙрогрпНрогрпБроЩрпНроХро│рпН. роХроЪрпНроЪро╛ роорпАройрпН рооро▒рпНро▒рпБроорпН рокро╛ро╕рпНроЪро░рпИро╕рпН роЪрпЖропрпНропрокрпНрокроЯро╛род рокро╛ро▓рпИродрпН родро╡ро┐ро░рпНроХрпНроХро╡рпБроорпН. родро┐ройроЪро░ро┐ роХро░рпНрокрпНрок роорпБройрпН ро╡рпИроЯрпНроЯрооро┐ройрпНроХро│рпИ роОроЯрпБродрпНродрпБроХрпНроХрпКро│рпНро│рпБроЩрпНроХро│рпН.',
        'en-IN': 'During pregnancy, eat plenty of fruits, vegetables, and protein. Avoid raw fish and unpasteurized milk. Take your prenatal vitamins daily.'
      },
      quiz: {
        'hi-IN': {
          question: 'рдХреМрди рд╕рд╛ рднреЛрдЬрди рдЖрдкрдХреЗ рдмрдЪреНрдЪреЗ рдХреЛ рдмрдврд╝рдиреЗ рдореЗрдВ рдорджрдж рдХрд░рддрд╛ рд╣реИ?',
          options: ['рдлрд▓ рдФрд░ рд╕рдмреНрдЬрд┐рдпрд╛рдВ', 'рд╕рд┐рд░реНрдл рдЪрд╛рд╡рд▓', 'рдорд┐рдард╛рдИ рдФрд░ рдЪреЙрдХрд▓реЗрдЯ'],
          correct: 0
        },
        'bn-IN': {
          question: 'ржХрзЛржи ржЦрж╛ржмрж╛рж░ ржЖржкржирж╛рж░ ржмрж╛ржЪрзНржЪрж╛рж░ ржмрзГржжрзНржзрж┐рждрзЗ рж╕рж╛рж╣рж╛ржпрзНржп ржХрж░рзЗ?',
          options: ['ржлрж▓ ржПржмржВ рж╕ржмржЬрж┐', 'рж╢рзБржзрзБ ржнрж╛ржд', 'ржорж┐рж╖рзНржЯрж┐ ржПржмржВ ржЪржХрж▓рзЗржЯ'],
          correct: 0
        },
        'mr-IN': {
          question: 'рдХреЛрдгрддреЗ рдЕрдиреНрди рддреБрдордЪреНрдпрд╛ рдмрд╛рд│рд╛рд▓рд╛ рд╡рд╛рдврдгреНрдпрд╛рд╕ рдорджрдд рдХрд░рддреЗ?',
          options: ['рдлрд│реЗ рдЖрдгрд┐ рднрд╛рдЬреНрдпрд╛', 'рдлрдХреНрдд рднрд╛рдд', 'рдЧреЛрдб рдЖрдгрд┐ рдЪреЙрдХрд▓реЗрдЯ'],
          correct: 0
        },
        'ta-IN': {
          question: 'роОроирпНрод роЙрогро╡рпБ роЙроЩрпНроХро│рпН роХрпБро┤роирпНродрпИропро┐ройрпН ро╡ро│ро░рпНроЪрпНроЪро┐роХрпНроХрпБ роЙродро╡рпБроХро┐ро▒родрпБ?',
          options: ['рокро┤роЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН роХро╛ропрпНроХро▒ро┐роХро│рпН', 'роЕро░ро┐роЪро┐ роороЯрпНроЯрпБроорпН', 'роЗройро┐рокрпНрокрпБроХро│рпН рооро▒рпНро▒рпБроорпН роЪро╛роХрпНро▓рпЗроЯрпН'],
          correct: 0
        },
        'en-IN': {
          question: 'What food helps your baby grow?',
          options: ['Fruits and vegetables', 'Only rice', 'Sweets and chocolates'],
          correct: 0
        }
      }
    },
    {
      id: 'dengue',
      title: {
        'hi-IN': 'рдбреЗрдВрдЧреВ рд░реЛрдХрдерд╛рдо',
        'bn-IN': 'ржбрзЗржЩрзНржЧрзБ ржкрзНрж░рждрж┐рж░рзЛржз',
        'mr-IN': 'рдбреЗрдВрдЧреВ рдкреНрд░рддрд┐рдмрдВрдз',
        'ta-IN': 'роЯрпЖроЩрпНроХрпБ родроЯрпБрокрпНрокрпБ',
        'en-IN': 'Dengue Prevention'
      },
      icon: 'ЁЯжЯ',
      content: {
        'hi-IN': 'рдбреЗрдВрдЧреВ рдордЪреНрдЫрд░реЛрдВ рд╕реЗ рдлреИрд▓рддрд╛ рд╣реИред рдЕрдкрдиреЗ рдЖрд╕рдкрд╛рд╕ рдХреЛ рд╕рд╛рдл рд░рдЦреЗрдВ, рдЦрдбрд╝реЗ рдкрд╛рдиреА рдХреЛ рд╣рдЯрд╛рдПрдВ, рдордЪреНрдЫрд░рджрд╛рдиреА рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рдФрд░ рд▓рдВрдмреА рдЖрд╕реНрддреАрди рдкрд╣рдиреЗрдВред',
        'bn-IN': 'ржбрзЗржЩрзНржЧрзБ ржорж╢рж╛рж░ ржорж╛ржзрзНржпржорзЗ ржЫржбрж╝рж╛ржпрж╝ред ржЖрж╢ржкрж╛рж╢ ржкрж░рж┐рж╖рзНржХрж╛рж░ рж░рж╛ржЦрзБржи, ржЬржорзЗ ржерж╛ржХрж╛ ржЬрж▓ рж╕рж░рж╛ржи, ржорж╢рж╛рж░рж┐ ржмрзНржпржмрж╣рж╛рж░ ржХрж░рзБржи ржПржмржВ рж▓ржорзНржмрж╛ рж╣рж╛рждрж╛ ржкрж░рзБржиред',
        'mr-IN': 'рдбреЗрдВрдЧреВ рдбрд╛рд╕рд╛рдВрджреНрд╡рд╛рд░реЗ рдкрд╕рд░рддреЛ. рдЖрдкрд▓реНрдпрд╛ рд╕рднреЛрд╡рддрд╛рд▓реА рд╕реНрд╡рдЪреНрдЫ рдареЗрд╡рд╛, рд╕реНрдерд┐рд░ рдкрд╛рдгреА рдХрд╛рдвреВрди рдЯрд╛рдХрд╛, рдбрд╛рд╕рдкрд▓реНрд▓рд╛ рд╡рд╛рдкрд░рд╛ рдЖрдгрд┐ рд▓рд╛рдВрдм рдмрд╛рд╣реА рдШрд╛рд▓рд╛.',
        'ta-IN': 'роЯрпЖроЩрпНроХрпБ роХрпКроЪрпБроХрпНроХро│ро╛ро▓рпН рокро░ро╡рпБроХро┐ро▒родрпБ. роЙроЩрпНроХро│рпН роЪрпБро▒рпНро▒рпБрокрпНрокрпБро▒роЩрпНроХро│рпИ роЪрпБродрпНродрооро╛роХ ро╡рпИродрпНродро┐ро░рпБроЩрпНроХро│рпН, роиро┐ро▒рпНроХрпБроорпН родрогрпНрогрпАро░рпИ роЕроХро▒рпНро▒рпБроЩрпНроХро│рпН, роХрпКроЪрпБ ро╡ро▓рпИроХро│рпИрокрпН рокропройрпНрокроЯрпБродрпНродрпБроЩрпНроХро│рпН рооро▒рпНро▒рпБроорпН роирпАрогрпНроЯ роЪроЯрпНроЯрпИроХро│рпИ роЕрогро┐ропрпБроЩрпНроХро│рпН.',
        'en-IN': 'Dengue is spread by mosquitoes. Keep your surroundings clean, remove standing water, use mosquito nets, and wear long sleeves.'
      },
      quiz: {
        'hi-IN': {
          question: 'рдбреЗрдВрдЧреВ рдХреЛ рдХреИрд╕реЗ рд░реЛрдХ рд╕рдХрддреЗ рд╣реИрдВ?',
          options: ['рдЬреНрдпрд╛рджрд╛ рдкрд╛рдиреА рдкреАрдПрдВ', 'рдЦрдбрд╝реЗ рдкрд╛рдиреА рдХреЛ рд╣рдЯрд╛рдПрдВ', 'рд╣рдореЗрд╢рд╛ рдШрд░ рдХреЗ рдЕрдВрджрд░ рд░рд╣реЗрдВ'],
          correct: 1
        },
        'bn-IN': {
          question: 'ржбрзЗржЩрзНржЧрзБ ржХрзАржнрж╛ржмрзЗ ржкрзНрж░рждрж┐рж░рзЛржз ржХрж░рж╛ ржпрж╛ржпрж╝?',
          options: ['ржЕржзрж┐ржХ ржЬрж▓ ржкрж╛ржи ржХрж░рзБржи', 'ржЬржорзЗ ржерж╛ржХрж╛ ржЬрж▓ рж╕рж░рж╛ржи', 'рж╕ржмрж╕ржоржпрж╝ ржмрж╛ржбрж╝рж┐рж░ ржнрж┐рждрж░рзЗ ржерж╛ржХрзБржи'],
          correct: 1
        },
        'mr-IN': {
          question: 'рдбреЗрдВрдЧреВ рдХрд╕рд╛ рдерд╛рдВрдмрд╡рддрд╛ рдпреЗрддреЛ?',
          options: ['рдЬрд╛рд╕реНрдд рдкрд╛рдгреА рдкреНрдпрд╛', 'рд╕реНрдерд┐рд░ рдкрд╛рдгреА рдХрд╛рдвреВрди рдЯрд╛рдХрд╛', 'рдиреЗрд╣рдореА рдШрд░рд╛рдд рд░рд╣рд╛'],
          correct: 1
        },
        'ta-IN': {
          question: 'роЯрпЖроЩрпНроХрпБро╡рпИ роОрокрпНрокроЯро┐ родроЯрпБроХрпНроХро▓ро╛роорпН?',
          options: ['роЕродро┐роХ родрогрпНрогрпАро░рпН роХрпБроЯро┐ропрпБроЩрпНроХро│рпН', 'роиро┐ро▒рпНроХрпБроорпН родрогрпНрогрпАро░рпИ роЕроХро▒рпНро▒рпБроЩрпНроХро│рпН', 'роОрокрпНрокрпЛродрпБроорпН ро╡рпАроЯрпНроЯрпБроХрпНроХрпБро│рпН роЗро░рпБроЩрпНроХро│рпН'],
          correct: 1
        },
        'en-IN': {
          question: 'How can you prevent dengue?',
          options: ['Drink more water', 'Remove standing water', 'Stay indoors always'],
          correct: 1
        }
      }
    },
    {
      id: 'hygiene',
      title: {
        'hi-IN': 'рд╡реНрдпрдХреНрддрд┐рдЧрдд рд╕реНрд╡рдЪреНрдЫрддрд╛',
        'bn-IN': 'ржмрзНржпржХрзНрждрж┐ржЧржд рж╕рзНржмрж╛рж╕рзНржерзНржпржмрж┐ржзрж┐',
        'mr-IN': 'рд╡реИрдпрдХреНрддрд┐рдХ рд╕реНрд╡рдЪреНрдЫрддрд╛',
        'ta-IN': 'родройро┐рокрпНрокроЯрпНроЯ роЪрпБроХро╛родро╛ро░роорпН',
        'en-IN': 'Personal Hygiene'
      },
      icon: 'ЁЯз╝',
      content: {
        'hi-IN': 'рдЦрд╛рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдФрд░ рд╢реМрдЪрд╛рд▓рдп рдХреЗ рдмрд╛рдж рд╕рд╛рдмреБрди рд╕реЗ рд╣рд╛рде рдзреЛрдПрдВред рдирд╛рдЦреВрди рдЫреЛрдЯреЗ рдФрд░ рд╕рд╛рдл рд░рдЦреЗрдВред рд╕рд╛рдл рдкрд╛рдиреА рд╕реЗ рд░реЛрдЬ рдирд╣рд╛рдПрдВред',
        'bn-IN': 'ржЦрж╛ржУржпрж╝рж╛рж░ ржЖржЧрзЗ ржПржмржВ ржЯржпрж╝рж▓рзЗржЯрзЗрж░ ржкрж░ рж╕рж╛ржмрж╛ржи ржжрж┐ржпрж╝рзЗ рж╣рж╛ржд ржзрзБржпрж╝рзЗ ржирж┐ржиред ржиржЦ ржЫрзЛржЯ ржПржмржВ ржкрж░рж┐рж╖рзНржХрж╛рж░ рж░рж╛ржЦрзБржиред ржкрж░рж┐рж╖рзНржХрж╛рж░ ржЬрж▓ ржжрж┐ржпрж╝рзЗ ржкрзНрж░рждрж┐ржжрж┐ржи рж╕рзНржирж╛ржи ржХрж░рзБржиред',
        'mr-IN': 'рдЦрд╛рдгреНрдпрд╛рдкреВрд░реНрд╡реА рдЖрдгрд┐ рд╢реМрдЪрд╛рд▓рдпрд╛рдирдВрддрд░ рд╕рд╛рдмрдгрд╛рдиреЗ рд╣рд╛рдд рдзреБрд╡рд╛. рдирдЦреЗ рд▓рд╣рд╛рди рдЖрдгрд┐ рд╕реНрд╡рдЪреНрдЫ рдареЗрд╡рд╛. рд╕реНрд╡рдЪреНрдЫ рдкрд╛рдгреНрдпрд╛рдиреЗ рджрд░рд░реЛрдЬ рд╕реНрдирд╛рди рдХрд░рд╛.',
        'ta-IN': 'роЪро╛рокрпНрокро┐роЯрпБро╡родро▒рпНроХрпБ роорпБройрпН рооро▒рпНро▒рпБроорпН роХро┤ро┐рокрпНрокро▒рпИроХрпНроХрпБрокрпН рокро┐ро▒роХрпБ роЪрпЛрокрпНрокрпБроЯройрпН роХрпИроХро│рпИ роХро┤рпБро╡рпБроЩрпНроХро│рпН. роироХроЩрпНроХро│рпИ роХрпБроЯрпНроЯрпИропро╛роХро╡рпБроорпН роЪрпБродрпНродрооро╛роХро╡рпБроорпН ро╡рпИродрпНродро┐ро░рпБроЩрпНроХро│рпН. роЪрпБродрпНродрооро╛рой родрогрпНрогрпАро░ро┐ро▓рпН родро┐ройроЪро░ро┐ роХрпБро│ро┐ропрпБроЩрпНроХро│рпН.',
        'en-IN': 'Wash your hands with soap before eating and after using the toilet. Keep your nails short and clean. Bathe daily with clean water.'
      },
      quiz: {
        'hi-IN': {
          question: 'рд╣рд╛рде рдХрдм рдзреЛрдиреЗ рдЪрд╛рд╣рд┐рдП?',
          options: ['рд╕рд┐рд░реНрдл рд╕реБрдмрд╣ рдореЗрдВ', 'рдЦрд╛рдиреЗ рд╕реЗ рдкрд╣рд▓реЗ рдФрд░ рд╢реМрдЪрд╛рд▓рдп рдХреЗ рдмрд╛рдж', 'рд╕рд┐рд░реНрдл рдЧрдВрджреЗ рд╣реЛрдиреЗ рдкрд░'],
          correct: 1
        },
        'bn-IN': {
          question: 'ржХржЦржи рж╣рж╛ржд ржзрзЛржпрж╝рж╛ ржЙржЪрж┐ржд?',
          options: ['рж╢рзБржзрзБ рж╕ржХрж╛рж▓рзЗ', 'ржЦрж╛ржУржпрж╝рж╛рж░ ржЖржЧрзЗ ржПржмржВ ржЯржпрж╝рж▓рзЗржЯрзЗрж░ ржкрж░', 'рж╢рзБржзрзБ ржирзЛржВрж░рж╛ рж╣рж▓рзЗ'],
          correct: 1
        },
        'mr-IN': {
          question: 'рд╣рд╛рдд рдХрдзреА рдзреБрд╡рд╛рд╡реЗ?',
          options: ['рдлрдХреНрдд рд╕рдХрд╛рд│реА', 'рдЦрд╛рдгреНрдпрд╛рдкреВрд░реНрд╡реА рдЖрдгрд┐ рд╢реМрдЪрд╛рд▓рдпрд╛рдирдВрддрд░', 'рдлрдХреНрдд рдШрд╛рдгреЗрд░рдбреЗ рдЭрд╛рд▓реНрдпрд╛рд╕'],
          correct: 1
        },
        'ta-IN': {
          question: 'роХрпИроХро│рпИ роОрокрпНрокрпЛродрпБ роХро┤рпБро╡ ро╡рпЗрогрпНроЯрпБроорпН?',
          options: ['роХро╛ро▓рпИропро┐ро▓рпН роороЯрпНроЯрпБроорпН', 'роЪро╛рокрпНрокро┐роЯрпБро╡родро▒рпНроХрпБ роорпБройрпН рооро▒рпНро▒рпБроорпН роХро┤ро┐рокрпНрокро▒рпИроХрпНроХрпБрокрпН рокро┐ро▒роХрпБ', 'роЕро┤рпБроХрпНроХро╛роХ роЗро░рпБроХрпНроХрпБроорпНрокрпЛродрпБ роороЯрпНроЯрпБроорпН'],
          correct: 1
        },
        'en-IN': {
          question: 'When should you wash your hands?',
          options: ['Only in the morning', 'Before eating and after toilet', 'Only when dirty'],
          correct: 1
        }
      }
    }
  ];

  const languages = [
    { code: 'hi-IN', name: 'рд╣рд┐рдВрджреА', voice: 'hi-IN-Deepika' },
    { code: 'bn-IN', name: 'ржмрж╛ржВрж▓рж╛', voice: 'bn-IN-Tanishaa' },
    { code: 'mr-IN', name: 'рдорд░рд╛рдареА', voice: 'mr-IN-Aarohi' },
    { code: 'ta-IN', name: 'родрооро┐ро┤рпН', voice: 'ta-IN-Pallavi' },
    { code: 'en-IN', name: 'English', voice: 'en-IN-Neerja' }
  ];

  // Load language content when language changes
  useEffect(() => {
    const loadLanguageContent = async () => {
      try {
        const response = await fetch(`http://localhost:8000/language-content/${userLanguage}`);
        if (response.ok) {
          const content = await response.json();
          setLanguageContent(content);
        }
      } catch (error) {
        console.error('Error loading language content:', error);
      }
    };
    
    loadLanguageContent();
  }, [userLanguage]);

  // Update speech recognition language when user language changes
  useEffect(() => {
    if (speechRecognition) {
      speechRecognition.lang = userLanguage;
    }
  }, [userLanguage, speechRecognition]);

  // Simulate live alerts with all languages
  useEffect(() => {
    const alertInterval = setInterval(() => {
      const alerts = {
        'hi-IN': [
          'тЪая╕П рдбреЗрдВрдЧреВ рдЕрд▓рд░реНрдЯ: рдЕрдкрдиреЗ рдХреНрд╖реЗрддреНрд░ рдореЗрдВ рдЦрдбрд╝реЗ рдкрд╛рдиреА рдХреЛ рд╣рдЯрд╛рдПрдВ!',
          'ЁЯПе рдЗрд╕ рд░рд╡рд┐рд╡рд╛рд░ рдХреЛ рдЧрд╛рдВрд╡ рдХреЗрдВрджреНрд░ рдореЗрдВ рдореБрдлреНрдд рд╕реНрд╡рд╛рд╕реНрдереНрдп рд╢рд┐рд╡рд┐рд░',
          'ЁЯТК рдЕрдкрдиреА рджрд╡рд╛рдПрдВ рд╕рдордп рдкрд░ рд▓реЗрдирд╛ рди рднреВрд▓реЗрдВ',
          'ЁЯМбя╕П рдЧрд░реНрдо рдореМрд╕рдо рдореЗрдВ рд╣рд╛рдЗрдбреНрд░реЗрдЯреЗрдб рд░рд╣реЗрдВ'
        ],
        'bn-IN': [
          'тЪая╕П ржбрзЗржЩрзНржЧрзБ рж╕рждрж░рзНржХрждрж╛: ржЖржкржирж╛рж░ ржПрж▓рж╛ржХрж╛ржпрж╝ ржЬржорзЗ ржерж╛ржХрж╛ ржЬрж▓ рж╕рж░рж╛ржи!',
          'ЁЯПе ржПржЗ рж░ржмрж┐ржмрж╛рж░ ржЧрзНрж░рж╛ржо ржХрзЗржирзНржжрзНрж░рзЗ ржмрж┐ржирж╛ржорзВрж▓рзНржпрзЗ рж╕рзНржмрж╛рж╕рзНржерзНржп рж╢рж┐ржмрж┐рж░',
          'ЁЯТК рж╕ржоржпрж╝ржорждрзЛ ржУрж╖рзБржз ржЦрзЗрждрзЗ ржнрзБрж▓ржмрзЗржи ржирж╛',
          'ЁЯМбя╕П ржЧрж░ржо ржЖржмрж╣рж╛ржУржпрж╝рж╛ржпрж╝ рж╣рж╛ржЗржбрзНрж░рзЗржЯрзЗржб ржерж╛ржХрзБржи'
        ],
        'mr-IN': [
          'тЪая╕П рдбреЗрдВрдЧреВ рд╕рддрд░реНрдХрддрд╛: рддреБрдордЪреНрдпрд╛ рдХреНрд╖реЗрддреНрд░рд╛рддреАрд▓ рд╕реНрдерд┐рд░ рдкрд╛рдгреА рдХрд╛рдвреВрди рдЯрд╛рдХрд╛!',
          'ЁЯПе рдпрд╛ рд░рд╡рд┐рд╡рд╛рд░реА рдЧрд╛рд╡ рдХреЗрдВрджреНрд░рд╛рдд рдореЛрдлрдд рдЖрд░реЛрдЧреНрдп рд╢рд┐рдмреАрд░',
          'ЁЯТК рддреБрдордЪреА рдФрд╖рдзреЗ рд╡реЗрд│реЗрд╡рд░ рдШреЗрдгреНрдпрд╛рд╕ рд╡рд┐рд╕рд░реВ рдирдХрд╛',
          'ЁЯМбя╕П рдЙрд╖реНрдг рд╣рд╡рд╛рдорд╛рдирд╛рдд рд╣рд╛рдпрдбреНрд░реЗрдЯреЗрдб рд░рд╣рд╛'
        ],
        'ta-IN': [
          'тЪая╕П роЯрпЖроЩрпНроХрпБ роОроЪрпНроЪро░ро┐роХрпНроХрпИ: роЙроЩрпНроХро│рпН рокроХрпБродро┐ропро┐ро▓рпН роиро┐ро▒рпНроХрпБроорпН родрогрпНрогрпАро░рпИ роЕроХро▒рпНро▒рпБроЩрпНроХро│рпН!',
          'ЁЯПе роЗроирпНрод роЮро╛ропро┐ро▒рпНро▒рпБроХрпНроХро┐ро┤роорпИ роХро┐ро░ро╛роо роорпИропродрпНродро┐ро▓рпН роЗро▓ро╡роЪ роЪрпБроХро╛родро╛ро░ роорпБроХро╛роорпН',
          'ЁЯТК роЙроЩрпНроХро│рпН рооро░рпБроирпНродрпБроХро│рпИ роЪро░ро┐ропро╛рой роирпЗро░родрпНродро┐ро▓рпН роОроЯрпБродрпНродрпБроХрпНроХрпКро│рпНро│ рооро▒роХрпНроХро╛родрпАро░рпНроХро│рпН',
          'ЁЯМбя╕П роЪрпВроЯро╛рой ро╡ро╛ройро┐ро▓рпИропро┐ро▓рпН роирпАро░рпЗро▒рпНро▒роорпН роЪрпЖропрпНропрпБроЩрпНроХро│рпН'
        ],
        'en-IN': [
          'тЪая╕П Dengue alert: Remove standing water in your area!',
          'ЁЯПе Free health camp this Sunday at village center',
          'ЁЯТК Don\'t forget to take your medicines on time',
          'ЁЯМбя╕П Stay hydrated during hot weather'
        ]
      };
      
      const currentAlerts = alerts[userLanguage] || alerts['en-IN'];
      const randomAlert = currentAlerts[Math.floor(Math.random() * currentAlerts.length)];
      setLiveAlerts(prev => [...prev.slice(-2), { id: Date.now(), message: randomAlert, time: new Date().toLocaleTimeString() }]);
    }, 30000); // Every 30 seconds

    return () => clearInterval(alertInterval);
  }, [userLanguage]);

  // TTS function using browser's speech synthesis
  const speakText = async (text, voiceId = null) => {
    if (!text) return;
    
    setIsSpeaking(true);
    setIsPaused(false);
    
    // Use Web Speech API directly
    fallbackToWebSpeech(text);
  };
  
  const fallbackToWebSpeech = (text) => {
    if (speechSynthesis) {
      // Cancel any ongoing speech
      speechSynthesis.cancel();
      
      const utterance = new SpeechSynthesisUtterance(text);
      
      // Set language based on userLanguage
      const languageMap = {
        'hi-IN': 'hi-IN',
        'bn-IN': 'bn-IN', 
        'mr-IN': 'mr-IN',
        'ta-IN': 'ta-IN',
        'en-IN': 'en-US'
      };
      
      utterance.lang = languageMap[userLanguage] || 'en-US';
      utterance.rate = 0.8;
      utterance.pitch = 1;
      
      utterance.onstart = () => {
        setIsSpeaking(true);
        setIsPaused(false);
      };
      
      utterance.onpause = () => {
        setIsPaused(true);
      };
      
      utterance.onresume = () => {
        setIsPaused(false);
      };
      
      utterance.onend = () => {
        setIsSpeaking(false);
        setIsPaused(false);
      };
      
      utterance.onerror = (event) => {
        console.error('Speech synthesis error:', event.error);
        setIsSpeaking(false);
        setIsPaused(false);
      };
      
      setCurrentUtterance(utterance);
      speechSynthesis.speak(utterance);
    }
  };

  // Stop speech
  const stopSpeech = () => {
    // Stop Murf API audio if playing
    if (currentAudio) {
      currentAudio.pause();
      currentAudio.currentTime = 0;
      setCurrentAudio(null);
    }
    
    // Stop Web Speech API if speaking
    if (speechSynthesis) {
      speechSynthesis.cancel();
    }
    
    setIsSpeaking(false);
    setIsPaused(false);
  };

  // Pause/Resume speech
  const togglePauseResume = () => {
    // Handle Murf API audio
    if (currentAudio) {
      if (currentAudio.paused) {
        currentAudio.play();
      } else {
        currentAudio.pause();
      }
      return;
    }
    
    // Handle Web Speech API
    if (speechSynthesis) {
      if (speechSynthesis.speaking) {
        if (speechSynthesis.paused) {
          speechSynthesis.resume();
        } else {
          speechSynthesis.pause();
        }
      }
    }
  };

  // STT function using browser's speech recognition
  const startListening = async () => {
    setIsListening(true);
    
    // Use Web Speech API directly
    fallbackToWebSpeechRecognition();
  };
  
  const fallbackToWebSpeechRecognition = () => {
    if (speechRecognition) {
      // Update recognition language
      const languageMap = {
        'hi-IN': 'hi-IN',
        'bn-IN': 'bn-IN', 
        'mr-IN': 'mr-IN',
        'ta-IN': 'ta-IN',
        'en-IN': 'en-US'
      };
      
      speechRecognition.lang = languageMap[userLanguage] || 'hi-IN';
      speechRecognition.start();
    } else {
      setIsListening(false);
      setQuizAnswer(languageContent.not_understood || 'Sorry, I could not understand. Please try again.');
    }
  };

  // Quiz functions
  const startQuiz = (section) => {
    const quiz = section.quiz[userLanguage] || section.quiz['en-IN'];
    setQuizQuestion(quiz);
    setQuizResult('');
    speakText(quiz.question);
  };

  const checkQuizAnswer = (answer) => {
    if (quizQuestion) {
      const isCorrect = answer.toLowerCase().includes(quizQuestion.options[quizQuestion.correct].toLowerCase());
      
      if (isCorrect) {
        setUserPoints(prev => prev + 50);
        setUserBadges(prev => [...prev, 'Quiz Master']);
        const successMessage = languageContent.excellent || 'Excellent! You got it right! You earned 50 points!';
        setQuizResult(`тЬЕ ${successMessage}`);
        speakText(successMessage);
      } else {
        const wrongMessage = (languageContent.wrong_answer || 'That\'s not quite right. The correct answer is: ') + quizQuestion.options[quizQuestion.correct];
        setQuizResult(`тЭМ ${wrongMessage}`);
        speakText(wrongMessage);
      }
      setQuizQuestion(null);
      setQuizAnswer('');
    }
  };

  // Welcome message
  useEffect(() => {
    if (languageContent.welcome) {
      speakText(languageContent.welcome);
    }
  }, [languageContent.welcome]);

  // Get localized content
  const getLocalizedContent = (section, field) => {
    return section[field][userLanguage] || section[field]['en-IN'] || section[field];
  };

  return (
    <div className="App">
      {/* Header */}
      <header className="app-header">
        <div className="header-left">
          <h1>ЁЯй║ Saarthi</h1>
          <p>Your Health Companion</p>
        </div>
        <div className="header-right">
          <div className="user-info">
            <span className="user-name">{userName}</span>
            <span className="user-points">тнР {userPoints} points</span>
          </div>
          <select 
            value={userLanguage} 
            onChange={(e) => setUserLanguage(e.target.value)}
            className="language-selector"
          >
            {languages.map(lang => (
              <option key={lang.code} value={lang.code}>{lang.name}</option>
            ))}
          </select>
        </div>
      </header>

      {/* Audio Controls */}
      {(isSpeaking || isPaused) && (
        <div className="audio-controls">
          <span className="audio-status">
            {isPaused ? 'тП╕я╕П Paused' : 'ЁЯФК Speaking...'}
          </span>
          <button onClick={togglePauseResume} className="audio-control-btn">
            {isPaused ? 'тЦ╢я╕П Resume' : 'тП╕я╕П Pause'}
          </button>
          <button onClick={stopSpeech} className="audio-control-btn">
            тП╣я╕П Stop
          </button>
        </div>
      )}

      {/* Live Alerts */}
      {liveAlerts.length > 0 && (
        <div className="live-alerts">
          {liveAlerts.map(alert => (
            <div key={alert.id} className="alert-item">
              <span className="alert-time">{alert.time}</span>
              <span className="alert-message">{alert.message}</span>
              <button onClick={() => speakText(alert.message)} className="alert-speak">ЁЯФК</button>
            </div>
          ))}
        </div>
      )}

      {/* Main Content */}
      <main className="main-content">
        {currentSection === 'home' && (
          <div className="home-section">
            <h2>Welcome to Saarthi! ЁЯОЙ</h2>
            <p>Learn about health in your own language and voice.</p>
            
            <div className="health-topics">
              <h3>Choose a Topic:</h3>
              <div className="topics-grid">
                {healthSections.map(section => (
                  <div key={section.id} className="topic-card" onClick={() => setCurrentSection(section.id)}>
                    <div className="topic-icon">{section.icon}</div>
                    <h4>{getLocalizedContent(section, 'title')}</h4>
                    <button className="topic-button">Learn More</button>
                  </div>
                ))}
              </div>
            </div>

            <div className="user-badges">
              <h3>Your Achievements:</h3>
              <div className="badges-grid">
                {userBadges.map(badge => (
                  <span key={badge} className="badge">ЁЯПЖ {badge}</span>
                ))}
              </div>
            </div>
          </div>
        )}

        {healthSections.map(section => 
          currentSection === section.id && (
            <div key={section.id} className="content-section">
              <div className="section-header">
                <button onClick={() => setCurrentSection('home')} className="back-button">тЖР Back</button>
                <h2>{section.icon} {getLocalizedContent(section, 'title')}</h2>
              </div>
              
              <div className="content-card">
                <p>{getLocalizedContent(section, 'content')}</p>
                <div className="content-actions">
                  <button 
                    onClick={() => speakText(getLocalizedContent(section, 'content'))} 
                    className="action-button"
                    disabled={isSpeaking}
                  >
                    {isSpeaking ? 'ЁЯФК Speaking...' : 'ЁЯФК Listen to Content'}
                  </button>
                  <button onClick={() => startQuiz(section)} className="action-button quiz-button">
                    ЁЯза Take Quiz
                  </button>
                </div>
              </div>

              {quizQuestion && (
                <div className="quiz-section">
                  <h3>Quiz Question:</h3>
                  <p>{quizQuestion.question}</p>
                  <div className="quiz-options">
                    {quizQuestion.options.map((option, index) => (
                      <button 
                        key={index} 
                        onClick={() => checkQuizAnswer(option)}
                        className="quiz-option"
                      >
                        {option}
                      </button>
                    ))}
                  </div>
                  <div className="voice-answer">
                    <button 
                      onClick={startListening} 
                      disabled={isListening}
                      className="voice-button"
                    >
                      {isListening ? (languageContent.listening || 'ЁЯОд Listening...') : 'ЁЯОд Answer by Voice'}
                    </button>
                    {quizAnswer && <p>Your answer: {quizAnswer}</p>}
                    {quizResult && (
                      <div className="quiz-result">
                        <p>{quizResult}</p>
                      </div>
                    )}
                  </div>
                </div>
              )}
            </div>
          )
        )}
      </main>

      {/* Footer */}
      <footer className="app-footer">
        <p>Saarthi - Empowering Health Education Through Voice Technology</p>
        <p>Powered by Murf API</p>
      </footer>
    </div>
  );
}

export default App;
